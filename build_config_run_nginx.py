#!/usr/bin/env python2.7
import subprocess
import jinja2
import nginx
import argparse
import sys
import os

parser = argparse.ArgumentParser(description='Create nginx upstream configuration, and start nginx')
parser.add_argument('-c', required=False, help='nginx command to execute', default="nginx -g 'daemon off;'")
parser.add_argument('-u', required=True, help='Comma delimited upstream task name(s):label(s) to use as upstream, e.g. othertask1:http1,othertask2:http2')
parser.add_argument('--worker_connections', required=False, help='Number of worker_connections in nginx.conf', default=1024)
parser.add_argument('--worker_processes', required=False, help='Number of worker_processes in nginx.conf', default=1)

args = parser.parse_args()

# Write out the /etc/nginx/nginx.conf file as a Jinja template
nginx_file = "/etc/nginx/nginx.conf"
content = ""
with open(nginx_file, 'r') as content_file:
    content = content_file.read()

# process the template
template = jinja2.Template(content)
content = template.render(
    worker_connections=args.worker_connections,
    worker_processes=args.worker_processes
)

print content

# write back the file
f = open(nginx_file, "w")
f.write(content)
f.close()


# Build the Configuration file
c = nginx.Conf()

upstream_args = ['tasks']
for upstream in args.u.split(','):
    task, label = upstream.split(':')

    # example NOMAD env variables for task nginx1 with port binding http
    """
    NOMAD_IP_nginx1_http=10.123.26.15
    NOMAD_PORT_nginx1_http=22707
    NOMAD_ADDR_nginx1_http=10.123.26.15:22707
    """

    # find out the IP address of the task via env NOMAD_IP_nginx1_http
    env_var = 'NOMAD_ADDR_%s_%s' % (task, label)
    url = os.getenv(env_var)
    if not url:
        print "ERROR: Environment variable %s does not exist, exiting..." % env_var
        sys.exit(1)

    upstream_args.append(nginx.Key('server', url))

u = nginx.Upstream(*upstream_args)
c.add(u)

s = nginx.Server()
s.add(
    nginx.Key('listen', '80'),
    nginx.Comment('Autogenerated configuration from build_config_run_nginx.py'),

    nginx.Key('server_name', 'localhost'),
    nginx.Key('root', '/usr/share/nginx/html'),
    nginx.Key('index', 'index.html'),
    
    nginx.Location('/',
        nginx.Key('proxy_pass', 'http://tasks'))
    )

c.add(s)

print nginx.dumps(c)

nginx.dumpf(c, '/etc/nginx/conf.d/default.conf')

nginx = subprocess.Popen(["nginx", "-g", "daemon off;"], stderr=subprocess.PIPE, stdout=subprocess.PIPE)

print nginx.communicate()

